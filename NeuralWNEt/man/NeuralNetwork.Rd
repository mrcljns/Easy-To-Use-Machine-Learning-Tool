% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NeuralNetwork.R
\name{NeuralNetwork}
\alias{NeuralNetwork}
\title{NeuralNetwork object}
\description{
This R6 class represents a neural network model and provides methods for forward and backward propagation, as well as training and making predictions.
}
\examples{

## ------------------------------------------------
## Method `NeuralNetwork$new`
## ------------------------------------------------

net <- NeuralNetwork$new(rand_state=42, layers_hidden=2, neurons_hidden = 4, problem_type = "classification", activ_type = "sigmoid")

## ------------------------------------------------
## Method `NeuralNetwork$init_network`
## ------------------------------------------------

X <- matrix(sample(1:100, 1200, replace=TRUE), ncol=3)
net <- NeuralNetwork$new(rand_state=42, layers_hidden=2, neurons_hidden = 4, problem_type = "classification", activ_type = "sigmoid")
net$init_network(ncol(X))

## ------------------------------------------------
## Method `NeuralNetwork$train`
## ------------------------------------------------

X <- matrix(sample(1:100, 1200, replace=TRUE), ncol=3)
y <- sample(c(0,1), 400, replace=TRUE)
net <- NeuralNetwork$new(rand_state=42, layers_hidden=2, neurons_hidden = 4, problem_type = "classification", activ_type = "sigmoid")
net$init_network(ncol(X))
net$train(X, y, epochs=1000, lr=0.01, batch_size=64)

## ------------------------------------------------
## Method `NeuralNetwork$predict`
## ------------------------------------------------

X <- matrix(sample(1:100, 1200, replace=TRUE), ncol=3)
y <- sample(c(0,1), 400, replace=TRUE)
X_test <- matrix(sample(1:100, 300, replace=TRUE), ncol=3)
net <- NeuralNetwork$new(rand_state=42, layers_hidden=2, neurons_hidden = 4, problem_type = "classification", activ_type = "sigmoid")
net$init_network(ncol(X))
net$train(X, y, epochs=1000, lr=0.01, batch_size=64)
predictions <- net$predict(X_test, threshold=0.5)
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{W}}{A list of weight matrices for each layer.}

\item{\code{b}}{A list of bias vectors for each layer.}

\item{\code{problem_type}}{A character specifying the problem type ("classification" or "regression").}

\item{\code{activ_type}}{A character specifying the type of activation function ("sigmoid", "tanh", or "relu").}

\item{\code{layers_hidden}}{An integer specifying the number of hidden layers.}

\item{\code{neurons_hidden}}{An integer specifying the number of neurons in each hidden layer.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-NeuralNetwork-new}{\code{NeuralNetwork$new()}}
\item \href{#method-NeuralNetwork-init_network}{\code{NeuralNetwork$init_network()}}
\item \href{#method-NeuralNetwork-train}{\code{NeuralNetwork$train()}}
\item \href{#method-NeuralNetwork-predict}{\code{NeuralNetwork$predict()}}
\item \href{#method-NeuralNetwork-clone}{\code{NeuralNetwork$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NeuralNetwork-new"></a>}}
\if{latex}{\out{\hypertarget{method-NeuralNetwork-new}{}}}
\subsection{Method \code{new()}}{
Customize the neural network.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NeuralNetwork$new(
  rand_state = 42,
  layers_hidden = 2,
  neurons_hidden = 4,
  problem_type = "classification",
  activ_type = "sigmoid"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{rand_state}}{An integer specifying the random state.}

\item{\code{layers_hidden}}{An integer specifying the number of hidden layers.}

\item{\code{neurons_hidden}}{An integer specifying the number of neurons in each hidden layer.}

\item{\code{problem_type}}{A character specifying the problem type ("classification" or "regression").}

\item{\code{activ_type}}{A character specifying the type of activation function ("sigmoid", "tanh", or "relu").}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{net <- NeuralNetwork$new(rand_state=42, layers_hidden=2, neurons_hidden = 4, problem_type = "classification", activ_type = "sigmoid")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NeuralNetwork-init_network"></a>}}
\if{latex}{\out{\hypertarget{method-NeuralNetwork-init_network}{}}}
\subsection{Method \code{init_network()}}{
Initialize the weights and biases of the neural network.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NeuralNetwork$init_network(input_neurons)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_neurons}}{An integer specifying the number of input neurons.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{X <- matrix(sample(1:100, 1200, replace=TRUE), ncol=3)
net <- NeuralNetwork$new(rand_state=42, layers_hidden=2, neurons_hidden = 4, problem_type = "classification", activ_type = "sigmoid")
net$init_network(ncol(X))
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NeuralNetwork-train"></a>}}
\if{latex}{\out{\hypertarget{method-NeuralNetwork-train}{}}}
\subsection{Method \code{train()}}{
Train the neural network.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NeuralNetwork$train(X, y, epochs = 1000, lr = 0.01, batch_size = 64)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{X}}{A data frame or matrix of the input data.}

\item{\code{y}}{A numeric vector of the target variable.}

\item{\code{epochs}}{An integer specifying the number of training epochs.}

\item{\code{lr}}{A numeric variable specifying the learning rate.}

\item{\code{batch_size}}{An integer specifying the size of each mini-batch.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{X <- matrix(sample(1:100, 1200, replace=TRUE), ncol=3)
y <- sample(c(0,1), 400, replace=TRUE)
net <- NeuralNetwork$new(rand_state=42, layers_hidden=2, neurons_hidden = 4, problem_type = "classification", activ_type = "sigmoid")
net$init_network(ncol(X))
net$train(X, y, epochs=1000, lr=0.01, batch_size=64)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NeuralNetwork-predict"></a>}}
\if{latex}{\out{\hypertarget{method-NeuralNetwork-predict}{}}}
\subsection{Method \code{predict()}}{
Train the neural network.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NeuralNetwork$predict(X, threshold = 0.5)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{X}}{A data frame or matrix of the test data.}

\item{\code{threshold}}{For classification, threshold will describe where to cut off the predictions}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A vector of predictions.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{X <- matrix(sample(1:100, 1200, replace=TRUE), ncol=3)
y <- sample(c(0,1), 400, replace=TRUE)
X_test <- matrix(sample(1:100, 300, replace=TRUE), ncol=3)
net <- NeuralNetwork$new(rand_state=42, layers_hidden=2, neurons_hidden = 4, problem_type = "classification", activ_type = "sigmoid")
net$init_network(ncol(X))
net$train(X, y, epochs=1000, lr=0.01, batch_size=64)
predictions <- net$predict(X_test, threshold=0.5)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NeuralNetwork-clone"></a>}}
\if{latex}{\out{\hypertarget{method-NeuralNetwork-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NeuralNetwork$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
